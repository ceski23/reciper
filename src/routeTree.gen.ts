/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as RecipesIndexRouteImport } from './routes/recipes/index'
import { Route as SettingsUnitsRouteImport } from './routes/settings/units'
import { Route as SettingsThemeRouteImport } from './routes/settings/theme'
import { Route as SettingsAccountRouteImport } from './routes/settings/account'
import { Route as RecipesScrapeRouteImport } from './routes/recipes/scrape'
import { Route as RecipesNewRouteImport } from './routes/recipes/new'
import { Route as RecipesMasterDetailRouteImport } from './routes/recipes/_masterDetail'
import { Route as AuthGoogleRouteImport } from './routes/auth/google'
import { Route as RecipesIdEditRouteImport } from './routes/recipes_/$id.edit'
import { Route as RecipesMasterDetailIdRouteImport } from './routes/recipes/_masterDetail.$id'

const RecipesRouteImport = createFileRoute('/recipes')()

const RecipesRoute = RecipesRouteImport.update({
  id: '/recipes',
  path: '/recipes',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesIndexRoute = RecipesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RecipesRoute,
} as any)
const SettingsUnitsRoute = SettingsUnitsRouteImport.update({
  id: '/settings/units',
  path: '/settings/units',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsThemeRoute = SettingsThemeRouteImport.update({
  id: '/settings/theme',
  path: '/settings/theme',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsAccountRoute = SettingsAccountRouteImport.update({
  id: '/settings/account',
  path: '/settings/account',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesScrapeRoute = RecipesScrapeRouteImport.update({
  id: '/scrape',
  path: '/scrape',
  getParentRoute: () => RecipesRoute,
} as any)
const RecipesNewRoute = RecipesNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => RecipesRoute,
} as any)
const RecipesMasterDetailRoute = RecipesMasterDetailRouteImport.update({
  id: '/_masterDetail',
  getParentRoute: () => RecipesRoute,
} as any)
const AuthGoogleRoute = AuthGoogleRouteImport.update({
  id: '/auth/google',
  path: '/auth/google',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesIdEditRoute = RecipesIdEditRouteImport.update({
  id: '/recipes_/$id/edit',
  path: '/recipes/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesMasterDetailIdRoute = RecipesMasterDetailIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => RecipesMasterDetailRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/auth/google': typeof AuthGoogleRoute
  '/recipes': typeof RecipesMasterDetailRouteWithChildren
  '/recipes/new': typeof RecipesNewRoute
  '/recipes/scrape': typeof RecipesScrapeRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/settings/units': typeof SettingsUnitsRoute
  '/recipes/': typeof RecipesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/recipes/$id': typeof RecipesMasterDetailIdRoute
  '/recipes/$id/edit': typeof RecipesIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/auth/google': typeof AuthGoogleRoute
  '/recipes': typeof RecipesIndexRoute
  '/recipes/new': typeof RecipesNewRoute
  '/recipes/scrape': typeof RecipesScrapeRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/settings/units': typeof SettingsUnitsRoute
  '/settings': typeof SettingsIndexRoute
  '/recipes/$id': typeof RecipesMasterDetailIdRoute
  '/recipes/$id/edit': typeof RecipesIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/auth/google': typeof AuthGoogleRoute
  '/recipes': typeof RecipesRouteWithChildren
  '/recipes/_masterDetail': typeof RecipesMasterDetailRouteWithChildren
  '/recipes/new': typeof RecipesNewRoute
  '/recipes/scrape': typeof RecipesScrapeRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/settings/units': typeof SettingsUnitsRoute
  '/recipes/': typeof RecipesIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/recipes/_masterDetail/$id': typeof RecipesMasterDetailIdRoute
  '/recipes_/$id/edit': typeof RecipesIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/search'
    | '/auth/google'
    | '/recipes'
    | '/recipes/new'
    | '/recipes/scrape'
    | '/settings/account'
    | '/settings/theme'
    | '/settings/units'
    | '/recipes/'
    | '/settings'
    | '/recipes/$id'
    | '/recipes/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/search'
    | '/auth/google'
    | '/recipes'
    | '/recipes/new'
    | '/recipes/scrape'
    | '/settings/account'
    | '/settings/theme'
    | '/settings/units'
    | '/settings'
    | '/recipes/$id'
    | '/recipes/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/search'
    | '/auth/google'
    | '/recipes'
    | '/recipes/_masterDetail'
    | '/recipes/new'
    | '/recipes/scrape'
    | '/settings/account'
    | '/settings/theme'
    | '/settings/units'
    | '/recipes/'
    | '/settings/'
    | '/recipes/_masterDetail/$id'
    | '/recipes_/$id/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SearchRoute: typeof SearchRoute
  AuthGoogleRoute: typeof AuthGoogleRoute
  RecipesRoute: typeof RecipesRouteWithChildren
  SettingsAccountRoute: typeof SettingsAccountRoute
  SettingsThemeRoute: typeof SettingsThemeRoute
  SettingsUnitsRoute: typeof SettingsUnitsRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  RecipesIdEditRoute: typeof RecipesIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/recipes': {
      id: '/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes/': {
      id: '/recipes/'
      path: '/'
      fullPath: '/recipes/'
      preLoaderRoute: typeof RecipesIndexRouteImport
      parentRoute: typeof RecipesRoute
    }
    '/settings/units': {
      id: '/settings/units'
      path: '/settings/units'
      fullPath: '/settings/units'
      preLoaderRoute: typeof SettingsUnitsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/theme': {
      id: '/settings/theme'
      path: '/settings/theme'
      fullPath: '/settings/theme'
      preLoaderRoute: typeof SettingsThemeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/account': {
      id: '/settings/account'
      path: '/settings/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof SettingsAccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes/scrape': {
      id: '/recipes/scrape'
      path: '/scrape'
      fullPath: '/recipes/scrape'
      preLoaderRoute: typeof RecipesScrapeRouteImport
      parentRoute: typeof RecipesRoute
    }
    '/recipes/new': {
      id: '/recipes/new'
      path: '/new'
      fullPath: '/recipes/new'
      preLoaderRoute: typeof RecipesNewRouteImport
      parentRoute: typeof RecipesRoute
    }
    '/recipes/_masterDetail': {
      id: '/recipes/_masterDetail'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesMasterDetailRouteImport
      parentRoute: typeof RecipesRoute
    }
    '/auth/google': {
      id: '/auth/google'
      path: '/auth/google'
      fullPath: '/auth/google'
      preLoaderRoute: typeof AuthGoogleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes_/$id/edit': {
      id: '/recipes_/$id/edit'
      path: '/recipes/$id/edit'
      fullPath: '/recipes/$id/edit'
      preLoaderRoute: typeof RecipesIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes/_masterDetail/$id': {
      id: '/recipes/_masterDetail/$id'
      path: '/$id'
      fullPath: '/recipes/$id'
      preLoaderRoute: typeof RecipesMasterDetailIdRouteImport
      parentRoute: typeof RecipesMasterDetailRoute
    }
  }
}

interface RecipesMasterDetailRouteChildren {
  RecipesMasterDetailIdRoute: typeof RecipesMasterDetailIdRoute
}

const RecipesMasterDetailRouteChildren: RecipesMasterDetailRouteChildren = {
  RecipesMasterDetailIdRoute: RecipesMasterDetailIdRoute,
}

const RecipesMasterDetailRouteWithChildren =
  RecipesMasterDetailRoute._addFileChildren(RecipesMasterDetailRouteChildren)

interface RecipesRouteChildren {
  RecipesMasterDetailRoute: typeof RecipesMasterDetailRouteWithChildren
  RecipesNewRoute: typeof RecipesNewRoute
  RecipesScrapeRoute: typeof RecipesScrapeRoute
  RecipesIndexRoute: typeof RecipesIndexRoute
}

const RecipesRouteChildren: RecipesRouteChildren = {
  RecipesMasterDetailRoute: RecipesMasterDetailRouteWithChildren,
  RecipesNewRoute: RecipesNewRoute,
  RecipesScrapeRoute: RecipesScrapeRoute,
  RecipesIndexRoute: RecipesIndexRoute,
}

const RecipesRouteWithChildren =
  RecipesRoute._addFileChildren(RecipesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SearchRoute: SearchRoute,
  AuthGoogleRoute: AuthGoogleRoute,
  RecipesRoute: RecipesRouteWithChildren,
  SettingsAccountRoute: SettingsAccountRoute,
  SettingsThemeRoute: SettingsThemeRoute,
  SettingsUnitsRoute: SettingsUnitsRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  RecipesIdEditRoute: RecipesIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
