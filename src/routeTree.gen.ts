/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as RecipesIndexImport } from './routes/recipes/index'
import { Route as SettingsUnitsImport } from './routes/settings/units'
import { Route as SettingsThemeImport } from './routes/settings/theme'
import { Route as SettingsAccountImport } from './routes/settings/account'
import { Route as RecipesScrapeImport } from './routes/recipes/scrape'
import { Route as RecipesNewImport } from './routes/recipes/new'
import { Route as RecipesMasterDetailImport } from './routes/recipes/_masterDetail'
import { Route as AuthGoogleImport } from './routes/auth/google'
import { Route as RecipesIdEditImport } from './routes/recipes_/$id.edit'
import { Route as RecipesMasterDetailIdImport } from './routes/recipes/_masterDetail.$id'

// Create Virtual Routes

const RecipesImport = createFileRoute('/recipes')()

// Create/Update Routes

const RecipesRoute = RecipesImport.update({
  id: '/recipes',
  path: '/recipes',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const RecipesIndexRoute = RecipesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RecipesRoute,
} as any)

const SettingsUnitsRoute = SettingsUnitsImport.update({
  id: '/settings/units',
  path: '/settings/units',
  getParentRoute: () => rootRoute,
} as any)

const SettingsThemeRoute = SettingsThemeImport.update({
  id: '/settings/theme',
  path: '/settings/theme',
  getParentRoute: () => rootRoute,
} as any)

const SettingsAccountRoute = SettingsAccountImport.update({
  id: '/settings/account',
  path: '/settings/account',
  getParentRoute: () => rootRoute,
} as any)

const RecipesScrapeRoute = RecipesScrapeImport.update({
  id: '/scrape',
  path: '/scrape',
  getParentRoute: () => RecipesRoute,
} as any)

const RecipesNewRoute = RecipesNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => RecipesRoute,
} as any)

const RecipesMasterDetailRoute = RecipesMasterDetailImport.update({
  id: '/_masterDetail',
  getParentRoute: () => RecipesRoute,
} as any)

const AuthGoogleRoute = AuthGoogleImport.update({
  id: '/auth/google',
  path: '/auth/google',
  getParentRoute: () => rootRoute,
} as any)

const RecipesIdEditRoute = RecipesIdEditImport.update({
  id: '/recipes_/$id/edit',
  path: '/recipes/$id/edit',
  getParentRoute: () => rootRoute,
} as any)

const RecipesMasterDetailIdRoute = RecipesMasterDetailIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => RecipesMasterDetailRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/auth/google': {
      id: '/auth/google'
      path: '/auth/google'
      fullPath: '/auth/google'
      preLoaderRoute: typeof AuthGoogleImport
      parentRoute: typeof rootRoute
    }
    '/recipes': {
      id: '/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesImport
      parentRoute: typeof rootRoute
    }
    '/recipes/_masterDetail': {
      id: '/recipes/_masterDetail'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesMasterDetailImport
      parentRoute: typeof RecipesRoute
    }
    '/recipes/new': {
      id: '/recipes/new'
      path: '/new'
      fullPath: '/recipes/new'
      preLoaderRoute: typeof RecipesNewImport
      parentRoute: typeof RecipesImport
    }
    '/recipes/scrape': {
      id: '/recipes/scrape'
      path: '/scrape'
      fullPath: '/recipes/scrape'
      preLoaderRoute: typeof RecipesScrapeImport
      parentRoute: typeof RecipesImport
    }
    '/settings/account': {
      id: '/settings/account'
      path: '/settings/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof SettingsAccountImport
      parentRoute: typeof rootRoute
    }
    '/settings/theme': {
      id: '/settings/theme'
      path: '/settings/theme'
      fullPath: '/settings/theme'
      preLoaderRoute: typeof SettingsThemeImport
      parentRoute: typeof rootRoute
    }
    '/settings/units': {
      id: '/settings/units'
      path: '/settings/units'
      fullPath: '/settings/units'
      preLoaderRoute: typeof SettingsUnitsImport
      parentRoute: typeof rootRoute
    }
    '/recipes/': {
      id: '/recipes/'
      path: '/'
      fullPath: '/recipes/'
      preLoaderRoute: typeof RecipesIndexImport
      parentRoute: typeof RecipesImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/recipes/_masterDetail/$id': {
      id: '/recipes/_masterDetail/$id'
      path: '/$id'
      fullPath: '/recipes/$id'
      preLoaderRoute: typeof RecipesMasterDetailIdImport
      parentRoute: typeof RecipesMasterDetailImport
    }
    '/recipes_/$id/edit': {
      id: '/recipes_/$id/edit'
      path: '/recipes/$id/edit'
      fullPath: '/recipes/$id/edit'
      preLoaderRoute: typeof RecipesIdEditImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface RecipesMasterDetailRouteChildren {
  RecipesMasterDetailIdRoute: typeof RecipesMasterDetailIdRoute
}

const RecipesMasterDetailRouteChildren: RecipesMasterDetailRouteChildren = {
  RecipesMasterDetailIdRoute: RecipesMasterDetailIdRoute,
}

const RecipesMasterDetailRouteWithChildren =
  RecipesMasterDetailRoute._addFileChildren(RecipesMasterDetailRouteChildren)

interface RecipesRouteChildren {
  RecipesMasterDetailRoute: typeof RecipesMasterDetailRouteWithChildren
  RecipesNewRoute: typeof RecipesNewRoute
  RecipesScrapeRoute: typeof RecipesScrapeRoute
  RecipesIndexRoute: typeof RecipesIndexRoute
}

const RecipesRouteChildren: RecipesRouteChildren = {
  RecipesMasterDetailRoute: RecipesMasterDetailRouteWithChildren,
  RecipesNewRoute: RecipesNewRoute,
  RecipesScrapeRoute: RecipesScrapeRoute,
  RecipesIndexRoute: RecipesIndexRoute,
}

const RecipesRouteWithChildren =
  RecipesRoute._addFileChildren(RecipesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/auth/google': typeof AuthGoogleRoute
  '/recipes': typeof RecipesMasterDetailRouteWithChildren
  '/recipes/new': typeof RecipesNewRoute
  '/recipes/scrape': typeof RecipesScrapeRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/settings/units': typeof SettingsUnitsRoute
  '/recipes/': typeof RecipesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/recipes/$id': typeof RecipesMasterDetailIdRoute
  '/recipes/$id/edit': typeof RecipesIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/auth/google': typeof AuthGoogleRoute
  '/recipes': typeof RecipesIndexRoute
  '/recipes/new': typeof RecipesNewRoute
  '/recipes/scrape': typeof RecipesScrapeRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/settings/units': typeof SettingsUnitsRoute
  '/settings': typeof SettingsIndexRoute
  '/recipes/$id': typeof RecipesMasterDetailIdRoute
  '/recipes/$id/edit': typeof RecipesIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/search': typeof SearchRoute
  '/auth/google': typeof AuthGoogleRoute
  '/recipes': typeof RecipesRouteWithChildren
  '/recipes/_masterDetail': typeof RecipesMasterDetailRouteWithChildren
  '/recipes/new': typeof RecipesNewRoute
  '/recipes/scrape': typeof RecipesScrapeRoute
  '/settings/account': typeof SettingsAccountRoute
  '/settings/theme': typeof SettingsThemeRoute
  '/settings/units': typeof SettingsUnitsRoute
  '/recipes/': typeof RecipesIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/recipes/_masterDetail/$id': typeof RecipesMasterDetailIdRoute
  '/recipes_/$id/edit': typeof RecipesIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/search'
    | '/auth/google'
    | '/recipes'
    | '/recipes/new'
    | '/recipes/scrape'
    | '/settings/account'
    | '/settings/theme'
    | '/settings/units'
    | '/recipes/'
    | '/settings'
    | '/recipes/$id'
    | '/recipes/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/search'
    | '/auth/google'
    | '/recipes'
    | '/recipes/new'
    | '/recipes/scrape'
    | '/settings/account'
    | '/settings/theme'
    | '/settings/units'
    | '/settings'
    | '/recipes/$id'
    | '/recipes/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/search'
    | '/auth/google'
    | '/recipes'
    | '/recipes/_masterDetail'
    | '/recipes/new'
    | '/recipes/scrape'
    | '/settings/account'
    | '/settings/theme'
    | '/settings/units'
    | '/recipes/'
    | '/settings/'
    | '/recipes/_masterDetail/$id'
    | '/recipes_/$id/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SearchRoute: typeof SearchRoute
  AuthGoogleRoute: typeof AuthGoogleRoute
  RecipesRoute: typeof RecipesRouteWithChildren
  SettingsAccountRoute: typeof SettingsAccountRoute
  SettingsThemeRoute: typeof SettingsThemeRoute
  SettingsUnitsRoute: typeof SettingsUnitsRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  RecipesIdEditRoute: typeof RecipesIdEditRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SearchRoute: SearchRoute,
  AuthGoogleRoute: AuthGoogleRoute,
  RecipesRoute: RecipesRouteWithChildren,
  SettingsAccountRoute: SettingsAccountRoute,
  SettingsThemeRoute: SettingsThemeRoute,
  SettingsUnitsRoute: SettingsUnitsRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  RecipesIdEditRoute: RecipesIdEditRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/search",
        "/auth/google",
        "/recipes",
        "/settings/account",
        "/settings/theme",
        "/settings/units",
        "/settings/",
        "/recipes_/$id/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/auth/google": {
      "filePath": "auth/google.tsx"
    },
    "/recipes": {
      "filePath": "recipes",
      "children": [
        "/recipes/_masterDetail",
        "/recipes/new",
        "/recipes/scrape",
        "/recipes/"
      ]
    },
    "/recipes/_masterDetail": {
      "filePath": "recipes/_masterDetail.tsx",
      "parent": "/recipes",
      "children": [
        "/recipes/_masterDetail/$id"
      ]
    },
    "/recipes/new": {
      "filePath": "recipes/new.tsx",
      "parent": "/recipes"
    },
    "/recipes/scrape": {
      "filePath": "recipes/scrape.tsx",
      "parent": "/recipes"
    },
    "/settings/account": {
      "filePath": "settings/account.tsx"
    },
    "/settings/theme": {
      "filePath": "settings/theme.tsx"
    },
    "/settings/units": {
      "filePath": "settings/units.tsx"
    },
    "/recipes/": {
      "filePath": "recipes/index.tsx",
      "parent": "/recipes"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/recipes/_masterDetail/$id": {
      "filePath": "recipes/_masterDetail.$id.tsx",
      "parent": "/recipes/_masterDetail"
    },
    "/recipes_/$id/edit": {
      "filePath": "recipes_/$id.edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
